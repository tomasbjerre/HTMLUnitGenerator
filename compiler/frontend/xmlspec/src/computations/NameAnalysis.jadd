import semanticlib.SymbolTable;
import java.util.TreeMap;
import java.util.Map.Entry;

aspect NameAnalysis {  
  public SymbolTable Start.nameAnalysis(TreeMap<Integer,String> errors) {
    SymbolTable table = new SymbolTable();
    getTest().nameAnalysis(table,errors);
    return table;
  }
  
  void ASTNode.nameAnalysis(SymbolTable table, TreeMap<Integer,String> errors) {
    for (int k=0; k<getNumChild(); k++) {
        getChild(k).nameAnalysis(table,errors);
    }
  }
  
  void ASTNode.addDecl(SymbolTable table, TreeMap<Integer,String> errors) {
    for (int k=0; k<getNumChild(); k++) {
        getChild(k).addDecl(table,errors);
    }
  }
  
  void Test.nameAnalysis(SymbolTable table, TreeMap<Integer, String> errors) {
    table.enterBlock();
    for (PathsTag paths : getPathsTagList())
      paths.addDecl(table, errors);
    for (UrlsTag urls : getUrlsTagList())
      urls.addDecl(table, errors);
    super.nameAnalysis(table, errors);
    table.exitBlock();
  }
  
  void FlowTag.nameAnalysis(SymbolTable table, TreeMap<Integer, String> errors) {
        boolean startFound = false;
        for (StateTag state : getStateTagList()) {
            if (state.getIdAttribute().getIdDecl().getVALUE().equals("start"))
                startFound = true;
            state.getIdAttribute().addDecl(table, errors);
        }
        if (!startFound)
            errors.put(0, "No start state found in flow.");
        super.nameAnalysis(table, errors);
  }
  
  void FormTag.nameAnalysis(SymbolTable table, TreeMap<Integer, String> errors) {
    super.nameAnalysis(table, errors);
  }
  
  void StateTag.nameAnalysis(SymbolTable table, TreeMap<Integer, String> errors) {
    table.enterBlock();
    for (FormTag form : getFormTagList())
    	form.addDecl(table,errors);
    super.nameAnalysis(table, errors);
    table.exitBlock();
  }
  
  IdAttribute IdDecl.attribute;

  public void IdDecl.addDecl(SymbolTable table, TreeMap<Integer,String> errors) {
    if (table.alreadyDeclared(getVALUE())) {
            errors.put(first.beginLine, "Duplicate declaration: " + getVALUE() + " "
                    + startLineCol() + " first declared on "
                    + ((IdDecl)table.lookup(getVALUE())).startLineCol() + ", declaration found on "
                    + startLineCol());
    } else {
        table.add(getVALUE(),this);
    }
  }
  
  IdDecl IdUse.declaration;
  
  public void IdUse.nameAnalysis(SymbolTable table, TreeMap<Integer,String> errors) {
    declaration = (IdDecl)table.lookup(getVALUE());
    if (declaration == null) {
        errors.put(first.beginLine, 
          "Missing declaration: "+getVALUE()+" "+startLineCol());
    }
  }
  
  public IdDecl IdUse.getDecl() {
    return declaration;
  }
}
