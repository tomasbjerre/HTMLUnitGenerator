import compiler.SymbolTable;
import java.util.TreeMap;
import java.util.Map.Entry;
import compiler.data.flow.*;

aspect Populate
 { 
  protected static int ASTNode.stateCounter = 1;
  protected static State ASTNode.currentState = null;
  
  public void Start.populate(Flow flow, SymbolTable table) {
  	currentState = null;
  	stateCounter = 1;
    for (int k=0; k<getNumChild(); k++) {
      getChild(k).populate(flow, table);
    }
  }
  
  public void ASTNode.populate(Flow flow, SymbolTable table) {
    for (int k=0; k<getNumChild(); k++) {
      getChild(k).populate(flow, table);
    }
  }
   
  public void ASTNode.populate(Form form) {
    for (int k=0; k<getNumChild(); k++) {
      getChild(k).populate(form);
    }
  }
  
  public compiler.data.AttributeValue ASTNode.getAttributeValueFromChild() {
    for (int k=0; k<getNumChild(); k++) {
      compiler.data.AttributeValue attribute = getChild(k).getAttributeValueFromChild();
      if (attribute != null)
        return attribute;
    }
    return null;
  }
  
  public void UrlType.populate(Flow flow, SymbolTable table) {
    Url url = new Url(getIdDecl().getVALUE(), getContent().getCONTENT());
    table.addReferencable(getIdDecl().getVALUE(),url);
    flow.addUrl(url);
    super.populate(flow, table);
  }
  
  public void PathType.populate(Flow flow, SymbolTable table) {
	Path path = new Path(getIdDecl().getVALUE(), getContent().getCONTENT());
    table.addReferencable(getIdDecl().getVALUE(),path);
    flow.addPath(path);
    super.populate(flow, table);
  }
  
  public void TestType.populate(Flow flow, SymbolTable table) {
    table.enterBlock();
    currentState = new State("start");
    flow.setStart(currentState);
    super.populate(flow, table);
    table.exitBlock();
  }
  
  public void ActionType.populate(Flow flow, SymbolTable table) {
  	this.getChild(0).populate(flow, table);
  	super.populate(flow, table);
  }
  
  public void GoToType.populate(Flow flow, SymbolTable table) {
	State newState = new State("State"+stateCounter++);
	compiler.data.Referencable referencable = (compiler.data.Referencable)table.lookupReferencable(getIdUse().getVALUE());
	String delayStr = null;
    if (hasContent())
      delayStr = ""+Integer.parseInt(getContent().getCONTENT())*1000;
	Transition transition = new Transition(newState, referencable , delayStr );
	currentState.setTransition(transition);
	currentState = newState;
  }
  
  public void ClickOnType.populate(Flow flow, SymbolTable table) {
	State newState = new State("State"+stateCounter++);
	compiler.data.Referencable referencable = (compiler.data.Referencable)table.lookupReferencable(getIdUse().getVALUE());
    String delayStr = null;
    if (hasContent())
      delayStr = ""+Integer.parseInt(getContent().getCONTENT())*1000;
	Transition transition = new Transition(newState, referencable , delayStr);
	currentState.setTransition(transition);
	currentState = newState;
  }
  
  public void FindType.populate(Flow flow, SymbolTable table) {
        Path path = new Path("","/html/body");
        String delayStr = "0";
        for (FindTypeOption findTypeOption : getFindTypeOptionList()) {
            if (findTypeOption instanceof FindTypePath) {
                FindTypePath findTypePath = ((FindTypePath)findTypeOption);
                path = (Path)table.lookupReferencable(findTypePath.getPath().getVALUE());
            }
            if (findTypeOption instanceof FindTypeWaitAtMost) {
                FindTypeWaitAtMost findTypeWaitAtMost = ((FindTypeWaitAtMost)findTypeOption);
                delayStr = ""+Integer.parseInt(findTypeWaitAtMost.getWaitAtMost().getCONTENT())*1000;
            }
        }
        Find find = new Find(path);

        for (FindTypeItem findTypeItem : getItems())
            if (findTypeItem instanceof FindTypeAttribute) {
                FindTypeAttribute findTypeAttribute = (FindTypeAttribute)findTypeItem;
                Tag tag = new Tag(findTypeAttribute.getType().getCONTENT());
                for (FindTypeAttributeListItem findTypeAttributeListItem : findTypeAttribute.getAttributesList()) {
                    Attribute attribute = new Attribute(findTypeAttributeListItem.getAttribute().getCONTENT(),new AttributeValueString(findTypeAttributeListItem.getValue().getCONTENT()));
                    attribute.setAnd(findTypeAttributeListItem instanceof FindTypeAttributeListItemAnd);
                    tag.addAttribute(attribute);
                }
                tag.setIsAnd(findTypeItem instanceof FindTypeAndAttribute);
                find.addFindable(tag);
            } else if (findTypeItem instanceof FindTypeContaining) {
                FindTypeContaining findTypeContaining = (FindTypeContaining)findTypeItem;
                Text text = new Text(findTypeContaining.getValue().getCONTENT());
                text.setIsAnd(findTypeItem instanceof FindTypeAndContaining);
                find.addFindable(text);
            }

        find.setWaitAtMost(delayStr);
        currentState.addFind(find);
  }
  
  public void FillInAndClick.populate(Flow flow, SymbolTable table) {
        Form form = new Form(this.getIdDecl().getVALUE(),null);
        table.addReferencable(this.getIdDecl().getVALUE(),form);
        for (FormContent formContent : getFormContentList()) {
            Tag tag = new Tag("input");
            compiler.data.AttributeValue attributeValue = formContent.getAttributeValueFromChild();
            if (attributeValue == null) {
                attributeValue = new AttributeValueString(formContent.getValue().getCONTENT());
            }
            Attribute attribute = new Attribute(formContent.getAttribute().getCONTENT(),attributeValue);
            tag.addAttribute(attribute);
            form.addTag(tag);
        }
        currentState.addForm(form);
        State newState = new State("State"+stateCounter++);
        String delayStr = "0";
        Transition transition = new Transition(newState, form, delayStr);
        currentState.setTransition(transition);
        currentState = newState;

        getClickOnType().populate(flow, table);
  }
  
  public void UseProxy.populate(Flow flow, SymbolTable table) {
    flow.setProxyHost(getHost().getCONTENT());
    flow.setProxyPort(getPort().getCONTENT());
  }
  
  public compiler.data.AttributeValue OptionNumber.getAttributeValueFromChild() {
    return new AttributeValueByNumber(getNumber().getCONTENT());
  }
  
  public compiler.data.AttributeValue UniqueString.getAttributeValueFromChild() {
    return new AttributeValueUniqueString();
  }
  
  public compiler.data.AttributeValue UniqueStringOfLength.getAttributeValueFromChild() {
    return new AttributeValueUniqueString(Integer.parseInt(getLength().getCONTENT()));
  }
  
  public compiler.data.AttributeValue UniqueStringOfLengthStartingWith.getAttributeValueFromChild() {
    return new AttributeValueUniqueString(Integer.parseInt(getLength().getCONTENT()),getStartingWith().getCONTENT());
  }
  
  public compiler.data.AttributeValue Content.getAttributeValueFromChild() {
    return null;
  }
}
