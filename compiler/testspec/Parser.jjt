
options {
  NODE_DEFAULT_VOID = true; // don't generate nodes by default
  NODE_PREFIX = ""; // No prefix for generated AST classes
  MULTI = true;   // many class names
  NODE_SCOPE_HOOK = true; // hook methods are called when building AST nodes
}

PARSER_BEGIN(Parser)
package parser;public class Parser {
  /*
    The first and last tokens corresponding to an AST node are saved in that AST node.
    This requires that there is a .jadd-specification which declares the 
    first and last variables for ASTNode.
  */
   public void jjtreeOpenNodeScope(Node n) {
     ((ASTNode)n).first = getToken(1);
   }
   public void jjtreeCloseNodeScope(Node n) {
     ((ASTNode)n).last = getToken(0);
   }
}
PARSER_END(Parser)

SKIP : { " " | "\t" | "\n" | "\r" | "\n\t" }

TOKEN [IGNORE_CASE]: {
  < PATHSBEGIN: "<paths>">
| < PATHSEND: "</paths>">
| < PATHBEGIN: "<path">
| < PATHEND: "path>">
| < URLSBEGIN: "<urls>">
| < URLSEND: "</urls>">
| < URLBEGIN: "<url">
| < URLEND: "url>">
| < FLOWBEGIN: "<flow>">
| < FLOWEND: "</flow>">
| < STATEBEGIN: "<state">
| < STATEEND: "state>">
| < FINDBEGIN: "<find">
| < FINDEND: "</find>">
| < FORMBEGIN: "<form">
| < FORMEND: "</form>">
| < TEXTBEGIN: "<text">
| < TEXTEND: "text>">
| < INPUTBEGIN: "<input">
| < TRANSITIONBEGIN: "<transition">
| < TAGBEGIN: "<tag">
| < TAGEND: "</tag>">
| < ATTRIBUTEBEGIN: "<attribute">
| < RT: ">">
| < RTEND: "/>">
| < LTEND: "</">
| < CONTENT: ">" (~["<"])+ "</" >
}

/* Attributes */
TOKEN : {
  < STRING_LITERAL: "\"" ( ~["\"", "\\"] | "\\" ["\r", "\n", "\"", "\\"] | "\"" "\"" )* "\"" >
| < IDATTRIBUTE: "id=">
| < NAMEATTRIBUTE: "name=">
| < VALUEATTRIBUTE: "value=">
| < TOATTRIBUTE: "to=">
| < USINGATTRIBUTE: "using=">
| < PATHATTRIBUTE: "path=">
| < TYPEATTRIBUTE: "type=">
| < SUBMITATTRIBUTE: "submit=">
| < DELAYATTRIBUTE: "delay=">
}



public Start start() #Start : {}
{
  test()
  { return jjtThis; }
}

void test() #Test : {}
{
  (pathsTag())* #List(true) (urlsTag())* #List(true) flowTag() <EOF>
}



void flowTag() #FlowTag : {}
{
 <FLOWBEGIN> (stateTag())* #List(true) <FLOWEND>
}

void stateTag() #StateTag : {}
{
 <STATEBEGIN> idAttribute() <RT> (findTag())* #List(true) (formTag())* #List(true) (LOOKAHEAD(2) ((transitionTag())? <LTEND>) | (<LTEND>)) #Opt <STATEEND>
}

void formTag() #FormTag : {}
{
 <FORMBEGIN> idAttribute() submitAttribute() <RT> (inputTag())* #List(true) <FORMEND>
}

void inputTag() #InputTag : {}
{
 <INPUTBEGIN> nameAttribute() valueAttribute() <RTEND>
}

void transitionTag() #TransitionTag : {}
{
 <TRANSITIONBEGIN> toAttribute() usingAttribute() delayAttribute() <RTEND>
}

void findTag() #FindTag : {}
{
 <FINDBEGIN> pathAttribute() <RT> (textTag())* #List(true) (tagTag())* #List(true) <FINDEND>
}

void textTag() #TextTag : {}
{
 <TEXTBEGIN> content() <TEXTEND>
}

void tagTag() #TagTag : {}
{
 <TAGBEGIN> typeAttribute() <RT> (attributeTag())* #List(true) <TAGEND>
}

void attributeTag() #AttributeTag : {}
{
 <ATTRIBUTEBEGIN> nameAttribute() valueAttribute() <RTEND>
}

void pathsTag() #PathsTag : {}
{
 <PATHSBEGIN> (pathTag())* #List(true) <PATHSEND>
}

void pathTag() #PathTag : {}
{
 <PATHBEGIN> idAttribute() content() <PATHEND>
}

void urlsTag() #UrlsTag : {}
{
 <URLSBEGIN> (urlTag())* #List(true) <URLSEND>
}

void urlTag() #UrlTag : {}
{
 <URLBEGIN> idAttribute() content() <URLEND>
}



void idAttribute() #IdAttribute : {}
{
 <IDATTRIBUTE> idDecl()
}

void submitAttribute() #SubmitAttribute : {}
{
 <SUBMITATTRIBUTE> idUse()
}

void nameAttribute() #NameAttribute : {}
{
 <NAMEATTRIBUTE> contentAttribute()
}

void valueAttribute() #ValueAttribute : {}
{
 <VALUEATTRIBUTE> contentAttribute()
}

void typeAttribute() #TypeAttribute : {}
{
 <TYPEATTRIBUTE> contentAttribute()
}

void delayAttribute() #DelayAttribute : {}
{
 <DELAYATTRIBUTE> contentAttribute()
}

void toAttribute() #ToAttribute: {}
{
 <TOATTRIBUTE> idUse()
}

void usingAttribute() #UsingAttribute : {}
{
 <USINGATTRIBUTE> idUse()
}

void pathAttribute() #PathAttribute : {}
{
 <PATHATTRIBUTE> idUse()
}

void content() #Content : {Token t;}
{
 t = <CONTENT>
 { jjtThis.setCONTENT(t.image.substring(2,t.image.length()-2).trim()); }
}

void idDecl() #IdDecl : {Token t;}
{
 t = <STRING_LITERAL>
 {jjtThis.setVALUE(t.image.substring(1,t.image.length()-1).trim()); }
}

void idUse() #IdUse : {Token t;}
{
 t = <STRING_LITERAL>
 {jjtThis.setVALUE(t.image.substring(1,t.image.length()-1).trim()); }
}

void contentAttribute() #Content : {Token t;}
{
 t = <STRING_LITERAL>
 { jjtThis.setCONTENT(t.image.substring(1,t.image.length()-1).trim()); }
}


