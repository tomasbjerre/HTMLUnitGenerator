import semanticlib.SymbolTable;
import java.util.TreeMap;
import java.util.Map.Entry;
import compiler.data.*;

aspect Populate
 { 
  public void Start.populate(Flow flow, SymbolTable table) {
    for (int k=0; k<getNumChild(); k++) {
      getChild(k).populate(flow, null, table);
    }
  }
  
  public void ASTNode.populate(Flow flow, State state, SymbolTable table) {
    for (int k=0; k<getNumChild(); k++) {
      getChild(k).populate(flow, state, table);
    }
  }
  
  public void Test.populate(Flow flow, State state, SymbolTable table) {
    table.enterBlock();
    super.populate(flow, state, table);
    table.exitBlock();
  }
  
  public void FormTag.populate(Flow flow, State state, SymbolTable table) {
    Path submit = (Path)table.lookupReferencable(getSubmitAttribute().getIdUse().getVALUE());
    Form form = new Form(this.getIdAttribute().getIdDecl().getVALUE(),submit);
    table.addReferencable(this.getIdAttribute().getIdDecl().getVALUE(),form);
    for (InputTag inputTag : getInputTagList()) {
        Tag tag = new Tag("input");
        tag.addAttribute(new Attribute(inputTag.getNameAttribute().getContent().getCONTENT(), inputTag.getValueAttribute().getContent().getCONTENT()));
        form.addTag(tag);
    }
    super.populate(flow, state, table);
  }
  
  public void UrlTag.populate(Flow flow, State state, SymbolTable table) {
	Url url = new Url(getIdAttribute().getIdDecl().getVALUE(), getContent().getCONTENT());
    table.addReferencable(this.getIdAttribute().getIdDecl().getVALUE(),url);
    flow.addUrl(url);
    super.populate(flow, state, table);
  }
  
  public void PathTag.populate(Flow flow, State state, SymbolTable table) {
    Path path = new Path(getIdAttribute().getIdDecl().getVALUE(), getContent().getCONTENT());
    table.addReferencable(this.getIdAttribute().getIdDecl().getVALUE(),path);
    flow.addPath(path);
    super.populate(flow, state, table);
  }
  
  public void StateTag.populate(Flow flow, State state, SymbolTable table) {
    table.enterBlock();
    state = (State)table.lookupReferencable(getIdAttribute().getIdDecl().getVALUE());
    super.populate(flow, state, table);
    table.exitBlock();
  }
  
  public void FlowTag.populate(Flow flow, State state, SymbolTable table) {
        for (StateTag stateTag : getStateTagList()) {
            state = new State(stateTag.getIdAttribute().getIdDecl().getVALUE());
            table.addReferencable(stateTag.getIdAttribute().getIdDecl().getVALUE(),state);
        }
        flow.setStart((State)table.lookupReferencable("start"));
        super.populate(flow,state, table);
  }
  
  public void FindTag.populate(Flow flow, State state, SymbolTable table) {
        Path path = (Path)table.lookupReferencable(getPathAttribute().getIdUse().getVALUE());
        Find find = new Find(path);
        for (TagTag tagTag : getTagTagList()) {
            Tag tag = new Tag(tagTag.getTypeAttribute().getContent().getCONTENT());
            for (AttributeTag attributeTag : tagTag.getAttributeTagList()) {
                Attribute attribute = new Attribute(attributeTag.getNameAttribute().getContent().getCONTENT(), attributeTag.getValueAttribute().getContent().getCONTENT());
                tag.addAttribute(attribute);
            }
            find.addTag(tag);
        }
        
        for (TextTag textTag : getTextTagList()) {
            Text text = new Text(textTag.getContent().getCONTENT());
            find.addText(text);
        }
        
        state.addFind(find);
  }
  
  public void TransitionTag.populate(Flow flow, State state, SymbolTable table) {
        State jumpTo = (State)table.lookupReferencable(getToAttribute().getIdUse().getVALUE());
        compiler.data.Referencable using = table.lookupReferencable(getUsingAttribute().getIdUse().getVALUE());
        String delay = getDelayAttribute().getContent().getCONTENT();
        Transition transition = new Transition(jumpTo, using, delay);
        state.setTransition(transition);
  }
}
